% Generated by roxygen2 (4.0.1): do not edit by hand
\name{fitadmb}
\alias{fitadmb}
\title{Random Scale Detection Function Fitting with admb}
\usage{
fitadmb(x, w = Inf, formula = ~1, beta = NULL, sigma = 0,
  likelihood = "f2", extra.args = "-gh 10", verbose = TRUE, nsteps = 8,
  keep = FALSE, debug = FALSE)
}
\arguments{
\item{x}{vector of distances or dataframe containing observed distances (distance) and other covariates}

\item{w}{half-width of strip; if infinite w routine sets w to 2*max(x)}

\item{formula}{formula for scale function}

\item{beta}{starting values for beta}

\item{sigma}{starting value for log sigma}

\item{likelihood}{character string "g","f1","f2","fixed"; see likelihoods.pdf in the package directory}

\item{extra.args}{for admb run}

\item{verbose}{for compile and run}

\item{nsteps}{adromb integration argument; default 8.}

\item{keep}{if TRUE, uses existing tpl and exe}

\item{debug}{if TRUE output parameter and -lnl values during iterations}
}
\description{
Fits a half-normal detection function with random scale for line
transect sampling data. Uses one of 3 likelihoods. g,f1,f2,fixed
}
\details{
Beta[1] and bounds for beta[1] are set based on the measured distance scale and
they are adjusted internally by scaling distances such that max(x)=1.
Likewise the likelihood that is shown when debug=T is for scaled distances
but the reported value for the output is adjusted back to the original scale
}
\examples{
# random effect example in paper
dev.new()
par(mfrow=c(1,3))
set.seed(123)
# simulate data
x=simdata(n=500,w=Inf,beta=2,beta_eps=-.5)
# fit data with g likelihood eq(6) using R code
results_random=fitdata(x,w=Inf)
plotfit(x,w=max(x),results_random$model$par,nclass=30,
		main="R code\\neq 6 likelihood",adjust=FALSE)
# fit data with g likelihood eq (6) using ADMB
glike=fitadmb(x,w=Inf,likelihood="g",verbose=FALSE)
plotfit(x,w=Inf, glike$coefficients[1:2],nclass=30,
		main="ADMB code\\neq 6 likelihood",adjust=FALSE)
# fit data with f likelihood eq (9) using ADMB
f2like=fitadmb(x,w=Inf,likelihood="f2",verbose=FALSE)
plotfit(x,w=Inf,f2like$coefficients[1:2],nclass=30,
		main="ADMB code\\neq 9 likelihood")
#results in table 1
# R code
sprintf("\%7.2f",-results_random$model$val)
sprintf("\%5.3f",results_random$model$par[1])
sprintf("\%5.3f",results_random$model$par[2])
# Admb code g likelihood
sprintf("\%7.2f",glike$loglik)
sprintf("\%5.3f",glike$coeflist[[1]])
sprintf("\%5.3f",glike$coeflist[[2]])
# Admb code with f likelihood (f2)
sprintf("\%7.2f",f2like$loglik)
sprintf("\%5.3f",f2like$coeflist[[1]])
sprintf("\%5.3f",f2like$coeflist[[1]]-exp(2*f2like$coeflist[[2]]))
sprintf("\%5.3f",f2like$coeflist[[2]])
# mixed efffect example in paper
dev.new()
par(mfrow=c(1,2))
# simulate data
x1=simdata(n=2000,w=50,beta_eps=-.5,beta=2,
		fixed=FALSE,reject=TRUE)
x2=simdata(n=1000,w=50,beta_eps=-.5,beta=1,
		fixed=FALSE,reject=TRUE)
df=data.frame(covariate=c(rep(0,length(x1)),
				rep(1,length(x2))),distance=c(x1,x2))
# fit data with covariate
fwlike=fitadmb(df,w=50,formula=~covariate,
		likelihood="f2",verbose=FALSE)
param=fwlike$coefficients[1:3]
# plot and get estimates of abundance in covered area and its std error
Nhatwcov=plotfit(df$distance,w=50,par=param,nclass=30,
		dm=model.matrix(~covariate,df),
		main="With covariate")
Nhatwcov.se=compute_Nhat.se(par=param,fwlike$vcov[1:3,1:3],
		x=df,w=50,dm=model.matrix(~covariate,df))
# fit data without covariate
flike=fitadmb(df,w=50,formula=~1,
		likelihood="f2",verbose=FALSE)
param=flike$coefficients[1:2]
# plot and get estimates of abundance in covered area and its std error
Nhatwocov=plotfit(df$distance,w=50,par=param,nclass=30,
		main="Without covariate")
Nhatwocov.se=compute_Nhat.se(par=param,flike$vcov[1:2,1:2],
		x=df,w=50,dm=model.matrix(~1,df))
# The code to show delta AIC, abundance and std errors and sigma estimates is
round(-2*flike$loglik+2*2-(-2*fwlike$loglik+2*3),2)
round(Nhatwcov,0)
round(Nhatwcov.se,1)
round(Nhatwocov,0)
round(Nhatwocov.se,1)
round(exp(fwlike$coefficients[3]),2)
round(exp(flike$coefficients[2]),2)
# plots in figure 3 and results in paper
dev.new()
par(mfrow=c(2,2))
param=fwlike$coefficients[1:3]
Nhatwcov0=plotfit(df$distance[df$covariate==0],w=50,par=param,
		nclass=30,dm=model.matrix(~covariate,df[df$covariate==0,]),
		main="Model with covariate\\ncovariate value=0")
Nhatwcov0.se=compute_Nhat.se(par=param,fwlike$vcov[1:3,1:3],
		x=df[df$covariate==0,],w=50,
		dm=model.matrix(~covariate,df[df$covariate==0,]))
Nhatwcov1=plotfit(df$distance[df$covariate==1],w=50,par=param,
		nclass=30,dm=model.matrix(~covariate,df[df$covariate==1,]),
		main="Model with covariate\\ncovariate value=1")
Nhatwcov1.se=compute_Nhat.se(par=param,fwlike$vcov[1:3,1:3],
		x=df[df$covariate==1,],w=50,
		dm=model.matrix(~covariate,df[df$covariate==1,]))
param=flike$coefficients[1:2]
Nhatwocov0=plotfit(df$distance[df$covariate==0],w=50,par=param,
		nclass=30, main="Model without covariate\\ncovariate value=0")
Nhatwocov0.se=compute_Nhat.se(par=param,flike$vcov[1:2,1:2],
		x=df[df$covariate==0,],w=50,
		dm=model.matrix(~1,df[df$covariate==0,]))
Nhatwocov1=plotfit(df$distance[df$covariate==1],w=50,par=param,
		nclass=30,main="Model without covariate\\ncovariate value=1")
Nhatwocov1.se=compute_Nhat.se(par=param,flike$vcov[1:2,1:2],
		x=df[df$covariate==1,],w=50,
		dm=model.matrix(~1,df[df$covariate==1,]))
round(Nhatwcov0,0)
round(Nhatwcov0.se,1)
round(Nhatwcov1,1)
round(Nhatwcov1.se,1)
round(Nhatwocov0,0)
round(Nhatwocov0.se,1)
round(Nhatwocov1,1)
round(Nhatwocov1.se,1)
}
\author{
Jeff Laake
}

